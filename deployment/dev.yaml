version: '3.8'

services:
  caddy:
    container_name: parliscope-caddy
    image: caddy:2.7.5-alpine
    depends_on:
      - parliscope
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - django_staticfiles:/static
    networks:
      - parliscope
    restart: unless-stopped
  parliscope: &parliscope
    image: parliscope-parliscope
    container_name: parliscope-parliscope
    build: ../parliscope
    depends_on:
      - scraper-database
      - solr
      - previewservice
      - tika
      - pdfact
      - gotenberg
      - redis
    environment:
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - SOLR_HOST=http://solr:8983/solr
      - SOLR_COLLECTION=ris
      - SCRAPED_DB_HOST=scraper-database
      - SCRAPED_DB_PORT=5432
      - SCRAPED_DB_NAME=${SCRAPER_DB}
      - SCRAPED_DB_USER=${SCRAPER_DB_USER}
      - SCRAPED_DB_PASSWORD=${SCRAPER_DB_PASSWORD}
      - DEBUG=${DEBUG}
      - UPDATE_SOLR_CRON=${UPDATE_SOLR_CRON}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DJANGO_SU_NAME=${DJANGO_SU_NAME}
      - DJANGO_SU_PASSWD=${DJANGO_SU_PASSWD}
      - DJANGO_SU_EMAIL=${DJANGO_SU_EMAIL}
      - PREVIEW_HOST=http://previewservice:8000
      - TIKA_HOST=http://tika:9998
      - PDFACT_HOST=http://pdfact:80
      - GOTENBERG_HOST=http://gotenberg:3000
      - CELERY_BROKER_URL=redis://redis:6379/0
    volumes:
      - django_staticfiles:/app/staticfiles
      - ./scraper_files:/filestore
    ports:
      - 8000:8000
    # dev (serve static files)
    #command: python manage.py runserver 0.0.0.0:8000
    # prod/with webserver
    command: gunicorn parliscope.wsgi:application --bind 0.0.0.0:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      start_period: 10s
      retries: 10
    networks:
      - parliscope
    restart: unless-stopped
  # container for parliscope cron jobs (processing)
  parliscope_cron:
    <<: *parliscope
    container_name: parliscope-parliscope_cron
    ports: []
    command: crond -f
    healthcheck:
      test: ["NONE"]  # container dies with cron
  redis:
    image: redis:7.0-alpine
    container_name: parliscope-redis
    ports:
      - 6379:6379
    networks:
      - parliscope
    restart: unless-stopped
  celery-beat:
    <<: *parliscope
    container_name: parliscope-celery-beat
    ports: []
    expose: []
    command: celery -A parliscope beat -l info -S django
    healthcheck:
      disable: true
  celery-worker:
    <<: *parliscope
    container_name: parliscope-celery-worker
    ports: []
    expose: []
    command: celery -A parliscope worker -l info
    healthcheck:
      disable: true
  # scraper cron service
  scraper:
    image: parliscope-scraper
    container_name: parliscope-scraper
    build: ../scraper
    depends_on:
      - scraper-database
    environment:
      - DB_NAME=${SCRAPER_DB}
      - DB_USER=${SCRAPER_DB_USER}
      - DB_PASSWORD=${SCRAPER_DB_PASSWORD}
      - DB_HOST=scraper-database
      - DB_PORT=5432
    #command: crawl sessionnet -s SCRAPE_START=01/2023 -s SCRAPE_END=03/2023
    entrypoint: crond -f -d 0
    networks:
      - parliscope
    volumes:
      - ./scraper_files:/scraper/filestore
    restart: unless-stopped
  # database for scraper
  scraper-database:
    image: postgres
    container_name: parliscope-scraper-postgres
    environment:
      - POSTGRES_DB=${SCRAPER_DB}
      - POSTGRES_USER=${SCRAPER_DB_USER}
      - POSTGRES_PASSWORD=${SCRAPER_DB_PASSWORD}
    ports:
      - 5432:5432
    networks:
      - parliscope
    volumes:
      - scraper_db:/var/lib/postgresql
    restart: unless-stopped
  # solr search engine
  solr:
    image: parliscope-solr
    container_name: parliscope-solr
    build: ../solr
    user: "8983"
    environment:
      - SOLR_LOG_LEVEL=FINEST
    ports:
      - 8983:8983
    volumes:
      - solr_data:/var/solr
    networks:
      - parliscope
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8983/solr/ris/admin/ping"]
    restart: unless-stopped
  # tika (pdf to text)
  tika:
    image: apache/tika:1.28.4-full
    container_name: parliscope-tika
    ports:
      - 9998:9998
    networks:
      - parliscope
    restart: unless-stopped
  # pdf to text with pdfact
  pdfact:
    image: dnlbauer/pdfact-service:latest
    container_name: parliscope-pdfact
    ports:
      - 80:8080
    networks:
      - parliscope
    restart: unless-stopped
  # gotenberg file conversion (doc to pdf)
  gotenberg:
    image: gotenberg/gotenberg:7
    container_name: parliscope-gotenberg
    ports:
      - 3000:3000
    networks:
      - parliscope
    restart: unless-stopped
  # pdf preview image generator
  previewservice:
    image: fpurchess/preview-service
    container_name: parliscope-previewservice
    ports:
      - 8000:8001
    networks:
      - parliscope
    restart: unless-stopped
networks:
  parliscope:
volumes:
  caddy_data:
  django_staticfiles:
  solr_data:
  scraper_db:
