name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request_target:
    branches: [ "main" ]
    
env:
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_REGISTRY_USER: dnlbauer
  IMAGE_BASE_NAME: dnlbauer/griesheimtransparent

jobs:
  lint_frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    - name: Set up Python
      run: uv python install
    - name: Install dependencies
      run: uv sync --dev
    - name: Run ruff linting
      run: uv run ruff check
    - name: Run ruff formatting check
      run: uv run ruff format --check

  build_solr:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Extract metadata for container tagging
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{env.CONTAINER_REGISTRY }}/${{ env.IMAGE_BASE_NAME }}-solr
    - name: Login to container registry
      uses: docker/login-action@v2
      if: ${{ github.event_name != 'pull_request_target' }}
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ env.CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: "./solr"
        push: ${{ github.event_name != 'pull_request_target' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outpyts.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  build_frontend:
    needs: lint_frontend
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Extract metadata for container tagging
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{env.CONTAINER_REGISTRY }}/${{ env.IMAGE_BASE_NAME }}-frontend
    - name: Login to container registry
      uses: docker/login-action@v2
      if: ${{ github.event_name != 'pull_request_target' }}
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ env.CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: "./frontend"
        push: ${{ github.event_name != 'pull_request_target' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outpyts.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  build_scraper:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Extract metadata for container tagging
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{env.CONTAINER_REGISTRY }}/${{ env.IMAGE_BASE_NAME }}-scraper
    - name: Login to container registry
      uses: docker/login-action@v2
      if: ${{ github.event_name != 'pull_request_target' }}
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ env.CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: "./scraper"
        push: ${{ github.event_name != 'pull_request_target' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outpyts.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  dependabot_auto_merge:
      needs:
        - build_scraper
        - build_frontend
        - build_solr
      runs-on: ubuntu-latest
      if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request_target' }}
      steps:
        - name: Automerge dependabot PR
          env:
            PR_URL: ${{ github.event.pull_request.html_url }}
            GITHUB_TOKEN: ${{ secrets.DEPENDABOT_TOKEN }}
          run: gh pr merge --auto --merge "$PR_URL"
